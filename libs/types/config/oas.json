{
    "openapi": "3.0.0",
    "info": {
        "title": "Nutt Backend",
        "description": "View in [ReDoc](\/redoc) or [Swagger UI](\/doc).\n\n# Changelog\n\n### 2021-08-30\n- ``Changed`` - Worklog list\/export now accept lists of employee ids\/project ids\/titles\/branches instead of singular ones\n### 2021-08-31\n- ``Changed`` - Compensation request list\/export now accept lists of employee ids\/branches. Export now allows filtering on status\n### 2021-09-24\n- ``Removed`` - Removed old personnel handbook endpoints, use the new file endpoints instead.\n### 2021-10-29\n- ``Added`` - Endpoint for batch creation of worklog locks\n### 2021-12-06\n- ``Updated`` - The update order endpoint now requires the order's items to be passed in the request body, including the new `amount_ready` field. The order lines from the request will replace the order's current lines.\n### 2022-05-24\n- ``Updated`` - Revamped the user-facing password reset flow to use a temporary reset token instead of immediately changing a user's password\n### 2022-11-04\n- ``BC BREAK`` - Updated the createEmployee\/updateEmployee\/changeOwnData endpoints with four new fields, three of which are mandatory! New fields are contract_type, initials, place_of_birth and contract_end_date (optional).\n",
        "version": "0.1"
    },
    "paths": {
        "\/api\/agenda": {
            "get": {
                "tags": [
                    "Agenda"
                ],
                "summary": "Lists an overview of agenda items.",
                "description": "Returns a list of agenda items, optionally filtered to items between given dates.",
                "operationId": "get_agenda_overview",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Only does something when 'to' is also given, then returns only items between given dates.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Only does something when 'from' is also given, then returns only items between given dates.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Return items where given string (partially) matches either title or category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of agenda items",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/AgendaOverviewItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Agenda"
                ],
                "summary": "Create a new agenda item.",
                "description": "Creates a new agenda item using the information passed in the body.",
                "operationId": "post_agenda_create",
                "requestBody": {
                    "description": "New agenda item",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateAgendaType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/agenda\/{id}": {
            "put": {
                "tags": [
                    "Agenda"
                ],
                "summary": "Update an existing agenda item.",
                "description": "Update an existing agenda item using the information passed in the body.",
                "operationId": "put_agenda_update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New agenda values",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateAgendaType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Agenda"
                ],
                "summary": "Remove an agenda item.",
                "description": "Deletes an existing agenda item.",
                "operationId": "delete_agenda_delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/assignment": {
            "get": {
                "tags": [
                    "Assignment"
                ],
                "summary": "Lists an overview of assignments.",
                "description": "Returns a list of assignments, optionally filtered to items between given dates or a given employee.",
                "operationId": "get_assignment_overview",
                "parameters": [
                    {
                        "name": "employee_id",
                        "in": "query",
                        "description": "Return only assignments assigned to the given employee",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date, defaults to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of assignments",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Assignment"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Assignment"
                ],
                "summary": "Create a new assignment.",
                "description": "Creates a new assignment using the information passed in the body.",
                "operationId": "post_create_assignment",
                "requestBody": {
                    "description": "New assignment",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateAssignmentType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/assigned": {
            "get": {
                "tags": [
                    "Assignment"
                ],
                "summary": "Lists an overview of assignments assigned to the current user.",
                "description": "Returns a list of assignments, assigned to the current user, optionally filtered to items between given dates.",
                "operationId": "get_assigned_overview",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date, defaults to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of assignments",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Assignment"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/assignment\/batch": {
            "post": {
                "tags": [
                    "Assignment"
                ],
                "summary": "Creates multiple new assignments.",
                "description": "Creates new assignments using the information passed in the body.",
                "operationId": "post_batch_create_assignment",
                "requestBody": {
                    "description": "New assignments",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#\/components\/schemas\/CreateAssignmentType"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/BatchResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Assignment"
                ],
                "summary": "Removes multiple assignments.",
                "description": "Deletes assignments using the information passed in the body.",
                "operationId": "delete_batch_remove_assignment",
                "requestBody": {
                    "description": "Assignments to remove",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#\/components\/schemas\/BatchRemoveAssignmentType"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/BatchResponse"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/assignment\/check_availability": {
            "get": {
                "tags": [
                    "Assignment"
                ],
                "operationId": "get_check_availability",
                "parameters": [
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "description": "Employees to check for, invalid values are silently discarded",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Start date to check, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "End date to check, defaults to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of assignments",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/CheckAvailabilityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/assignment\/notify": {
            "post": {
                "tags": [
                    "Assignment"
                ],
                "summary": "Notify an employee their planning has changed.",
                "description": "Sends a push notification to an employee indicating their planning has been updated.",
                "operationId": "post_notify_employee",
                "requestBody": {
                    "description": "Target Employee",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/NotifyEmployeeType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/narrowcasting\/assignment": {
            "get": {
                "tags": [
                    "Assignment"
                ],
                "summary": "Lists an overview of assignments.",
                "description": "Returns a list of assignments, optionally filtered to items between given dates or a given employee.",
                "operationId": "get_narrowcasting_assignment_overview",
                "parameters": [
                    {
                        "name": "employee_id",
                        "in": "query",
                        "description": "Return only assignments assigned to the given employee",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date, defaults to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of assignments",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Assignment"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/assignment\/{id}": {
            "delete": {
                "tags": [
                    "Assignment"
                ],
                "summary": "Remove an assignment.",
                "description": "Deletes an existing assignment.",
                "operationId": "delete_remove_assignment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/catalog": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Lists all catalogs.",
                "description": "Returns all product catalogs.",
                "operationId": "get_list_catalogs",
                "responses": {
                    "200": {
                        "description": "List of catalogs",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Catalog"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/compensation-request": {
            "get": {
                "tags": [
                    "Compensation Request"
                ],
                "summary": "Lists an overview of compensation requests.",
                "description": "Returns a list of compensation requests, optionally filtered by status.",
                "operationId": "get_list_compensation_requests",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "employee_ids",
                        "in": "query",
                        "description": "Return only requests for the given employees",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "project_ids",
                        "in": "query",
                        "description": "Return only requests for the given projects",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "titles",
                        "in": "query",
                        "description": "Search by employee title",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "branches",
                        "in": "query",
                        "description": "Search by employee branch",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search for matching employee name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only compensation requests with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/EmployeeRequestStatus"
                        }
                    },
                    {
                        "name": "manager_ids",
                        "in": "query",
                        "description": "Return only items for employees who have one of the given employees listed as manager",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of compensation requests",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/CompensationRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Compensation Request"
                ],
                "summary": "Create a new compensation request.",
                "description": "Creates a new compensation request using the information passed in the body.",
                "operationId": "post_create_compensation_request",
                "requestBody": {
                    "description": "New compensation request",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateCompensationRequestType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/compensation-request\/export": {
            "get": {
                "tags": [
                    "Compensation Request"
                ],
                "summary": "Get compensation csv export.",
                "description": "Returns an export of approved compensation requests in csv format.",
                "operationId": "get_compensation_request_csv_export",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "employee_ids",
                        "in": "query",
                        "description": "Return only requests for the given employees",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "project_ids",
                        "in": "query",
                        "description": "Return only requests for the given projects",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "titles",
                        "in": "query",
                        "description": "Search by employee title",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "branches",
                        "in": "query",
                        "description": "Search by employee branch",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search for matching employee name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only compensation requests with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/EmployeeRequestStatus"
                        }
                    },
                    {
                        "name": "manager_ids",
                        "in": "query",
                        "description": "Return only items for employees who have one of the given employees listed as manager",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/Csv"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/my-compensation-request": {
            "get": {
                "tags": [
                    "Compensation Request"
                ],
                "summary": "Lists an overview of own compensation requests.",
                "description": "Returns a list of the current user's compensation requests.",
                "operationId": "get_list_own_compensation_requests",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date, defaults to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of compensation requests",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/CompensationRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/compensation-request\/{id}": {
            "put": {
                "tags": [
                    "Compensation Request"
                ],
                "summary": "Process a compensation request.",
                "description": "Updates the status for a compensation request. Marks the current user as processor.",
                "operationId": "put_process_compensation_request",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New status",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ProcessCompensationRequestType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee": {
            "get": {
                "tags": [
                    "Employee"
                ],
                "summary": "Lists an overview of employees.",
                "description": "Returns a list of employees.",
                "operationId": "get_list_employees",
                "parameters": [
                    {
                        "name": "plannable_only",
                        "in": "query",
                        "description": "Return only plannable employees",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Return employees where given string (partially) matches either first name, last name, infix, email, title or roles",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "minimal_output",
                        "in": "query",
                        "description": "Minimizes output per employee to id, first name\/infix\/last name, external reference",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of employees",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/EmployeeListItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Employee"
                ],
                "summary": "Create a new employee.",
                "description": "Creates a new employee using the information passed in the body.",
                "operationId": "post_create_employee",
                "requestBody": {
                    "description": "New employee",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateEmployeeType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/{employeeId}\/file": {
            "post": {
                "tags": [
                    "Employee"
                ],
                "summary": "Adds a file to an employee.",
                "operationId": "post_add_employee_file",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New file",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "title": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/colleagues": {
            "get": {
                "tags": [
                    "Employee"
                ],
                "summary": "Lists an overview of colleagues.",
                "description": "Returns a list of colleagues.",
                "operationId": "get_colleague_overview",
                "parameters": [
                    {
                        "name": "knowledge_tag_ids",
                        "in": "query",
                        "description": "Return only employees with one of the given knowledge tags",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of colleagues",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/LimitedEmployeeListItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/knowledge-tag": {
            "get": {
                "tags": [
                    "Knowledge Tag"
                ],
                "summary": "Lists an overview of knowledge tags.",
                "operationId": "get_list_knowledge_tags",
                "responses": {
                    "200": {
                        "description": "List of knowledge tags",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/KnowledgeTag"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Knowledge Tag"
                ],
                "summary": "Create a new knowledge tag.",
                "description": "Creates a new knowledge tag using the information passed in the body.",
                "operationId": "post_create_knowledge_tag",
                "requestBody": {
                    "description": "New knowledge tag",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateKnowledgeTagParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/group": {
            "get": {
                "tags": [
                    "Employee"
                ],
                "summary": "Lists employee groups.",
                "description": "Returns a list of employee groups, for a given week.",
                "operationId": "get_employee_group_overview",
                "parameters": [
                    {
                        "name": "week",
                        "in": "query",
                        "description": "Week to check for group. If omitted defaults to current ISO week number",
                        "required": false,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Year to check for group. If omitted defaults to current ISO week numbering year.",
                        "required": false,
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of employee groups",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EmployeeGroupOverview"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Employee"
                ],
                "summary": "Create a new employee group.",
                "description": "Creates a new employee group using the information passed in the body.",
                "operationId": "post_group_employees",
                "requestBody": {
                    "description": "New employee group",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/GroupEmployeesType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/narrowcasting\/group": {
            "get": {
                "tags": [
                    "Employee"
                ],
                "summary": "Lists employee groups.",
                "description": "Returns a list of employee groups, for a given week.",
                "operationId": "get_narrowcasting_group_overview",
                "parameters": [
                    {
                        "name": "week",
                        "in": "query",
                        "description": "Week to check for group. If omitted defaults to current ISO week number",
                        "required": false,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Year to check for group. If omitted defaults to current ISO week numbering year.",
                        "required": false,
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of employee groups",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EmployeeGroupOverview"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/export": {
            "get": {
                "tags": [
                    "Employee"
                ],
                "summary": "Get employee csv export.",
                "description": "Returns an export of employees in csv format.",
                "operationId": "get_employee_csv_export",
                "parameters": [
                    {
                        "name": "active_only",
                        "in": "query",
                        "description": "Export only active users",
                        "required": false,
                        "schema": {
                            "type": "bool"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/Csv"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/{id}": {
            "get": {
                "tags": [
                    "Employee"
                ],
                "summary": "Get employee details.",
                "description": "Returns detailed information about a given employee.",
                "operationId": "get_get_employee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Employee details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Employee"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Employee"
                ],
                "summary": "Update an existing employee.",
                "description": "Update an existing employee using the information passed in the body.",
                "operationId": "put_update_employee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New employee values",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateEmployeeType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/{employeeId}\/file\/{fileId}": {
            "get": {
                "tags": [
                    "Employee"
                ],
                "operationId": "get_get_employee_file",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Employee"
                ],
                "summary": "Updates an employee file.",
                "operationId": "put_update_employee_file",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated fields",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateEmployeeFileParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/{employeeId}\/file\/{fileId}\/notify": {
            "post": {
                "tags": [
                    "Employee"
                ],
                "summary": "Send a reminder to an employee a file has yet to be acknowledged.",
                "description": "Assigned employee is reminded by way of a push notification.",
                "operationId": "post_employee_file_notify",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/narrowcasting\/employee": {
            "get": {
                "tags": [
                    "Employee"
                ],
                "summary": "Lists an overview of employees.",
                "description": "Returns a list of employees.",
                "operationId": "get_narrowcasting_list_employees",
                "parameters": [
                    {
                        "name": "plannable_only",
                        "in": "query",
                        "description": "Return only plannable employees",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Return employees where given string (partially) matches either first name, last name, infix, email, title or roles",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "minimal_output",
                        "in": "query",
                        "description": "Minimizes output per employee to id, first name\/infix\/last name, external reference",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of employees",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/EmployeeListItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/knowledge-tag\/{id}": {
            "post": {
                "tags": [
                    "Knowledge Tag"
                ],
                "summary": "Updates a new knowledge tag.",
                "description": "Creates a new knowledge tag using the information passed in the body.",
                "operationId": "post_update_knowledge_tag",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New knowledge tag data",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateKnowledgeTagParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Knowledge Tag"
                ],
                "summary": "Remove a knowledge tag.",
                "operationId": "delete_remove_knowledge_tag",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/{id}\/message": {
            "post": {
                "tags": [
                    "Employee"
                ],
                "summary": "Send a message to an employee.",
                "description": "Sends a push notification to an employee with a message.",
                "operationId": "post_message_employee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Message to send",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/SendMessageType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/{id}\/knowledge-tags": {
            "put": {
                "tags": [
                    "Knowledge Tag"
                ],
                "summary": "Update an employee's knowledge tags.",
                "description": "Update an existing employee's knowledge tags using the information passed in the body.",
                "operationId": "put_update_employee_knowledge_tags",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New employee tags",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateEmployeeKnowledgeTagsParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/{id}\/image": {
            "post": {
                "tags": [
                    "Employee"
                ],
                "summary": "Update an employee's image.",
                "description": "Update an existing employee's image using the information passed in the body.",
                "operationId": "post_update_employee_image",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New employee image",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateEmployeeImagesType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/{id}\/password": {
            "put": {
                "tags": [
                    "Employee"
                ],
                "summary": "Update an existing employee's password.",
                "description": "Update an existing employee's password using the information passed in the body.",
                "operationId": "put_update_employee_password",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New employee password",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdatePasswordType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/employee\/{id}\/status": {
            "put": {
                "tags": [
                    "Employee"
                ],
                "summary": "Update an existing employee's status.",
                "description": "Update an existing employee's status using the information passed in the body.",
                "operationId": "put_update_employee_status",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New employee status",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateEmployeeStatusType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/export-dates\/{type}": {
            "get": {
                "tags": [
                    "Export"
                ],
                "summary": "Get export dates.",
                "description": "Returns the latest dates used for an export of the given type, if present. `type` must be one of \"worklog\", \"compensation_request\" or \"leave_request\"",
                "operationId": "get_get_export_log",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "worklog|compensation_request|leave_request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest log, if present",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/LatestExportLog"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/file": {
            "get": {
                "tags": [
                    "File"
                ],
                "summary": "Lists an overview of files.",
                "description": "Returns a list of files, optionally filtered by search filter.",
                "operationId": "get_list_files",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search for matching title\/filename",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of files",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/File"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "File"
                ],
                "summary": "Adds a downloadable file.",
                "description": "Upload a file to be downloadable in clients. This endpoint uses multipart\/form-data!",
                "operationId": "post_add_file",
                "requestBody": {
                    "description": "New file",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateFileType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/file\/{id}": {
            "delete": {
                "tags": [
                    "File"
                ],
                "summary": "Remove file.",
                "description": "Removes a file by file id. Also permanently deletes it from storage.",
                "operationId": "delete_remove_file",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/instance\/{instanceId}\/file": {
            "post": {
                "tags": [
                    "Form"
                ],
                "summary": "Adds a file to a form instance.",
                "operationId": "post_add_file_to_instance",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New file",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/instance\/self-assign\/{instanceId}\/file": {
            "post": {
                "tags": [
                    "Form"
                ],
                "summary": "Adds a file to a self-assigned form instance.",
                "operationId": "post_add_file_to_self_assigned_form_instance",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New file",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/instance": {
            "get": {
                "tags": [
                    "Form"
                ],
                "summary": "Lists an overview of form instances.",
                "description": "Returns a list of form instances, optionally filtered and\/or sorted.",
                "operationId": "get_list_form_instances",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "parent_id",
                        "in": "query",
                        "description": "Return only items belonging to the given parent form",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "Return only items for the given project",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "description": "Return only items assigned to the given user",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "responsible_employee_id",
                        "in": "query",
                        "description": "Return only items the given employee is responsible for",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only items with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/FormInstanceStatus"
                        }
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/FormInstanceSortField"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of form instances",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/FormInstanceListItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Form"
                ],
                "summary": "Create a new form instance.",
                "description": "Creates a new form instance using the information passed in the body. Form data is copied from the given template.",
                "operationId": "post_create_form_instance",
                "requestBody": {
                    "description": "New form instance",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateFormInstanceParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/{formId}\/{filename}": {
            "get": {
                "tags": [
                    "Form"
                ],
                "operationId": "get_get_form_file",
                "parameters": [
                    {
                        "name": "formId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form file"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/instance\/{instanceId}": {
            "get": {
                "tags": [
                    "Form"
                ],
                "summary": "Lists details of a form instance.",
                "description": "Returns detailed view of a form instance. If current user has ROLE_FORM_MANAGER, allows any form instance. If not, only instances assigned to the current user are allowed.",
                "operationId": "get_get_form_instance",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form instance details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/FormInstanceDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Form"
                ],
                "summary": "Update a form instance.",
                "description": "Allows for updating a form instance.",
                "operationId": "put_update_form_instance",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated form instance",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateInstanceParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/instance\/{instanceId}\/file\/{fileId}": {
            "get": {
                "tags": [
                    "Form"
                ],
                "operationId": "get_get_form_instance_file",
                "parameters": [
                    {
                        "name": "thumb",
                        "in": "query",
                        "description": "If true, return the thumb sized version of the file",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Form instance details"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Form"
                ],
                "summary": "Adds a file to a form instance.",
                "operationId": "delete_remove_file_from_instance",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/assigned": {
            "get": {
                "tags": [
                    "Form"
                ],
                "summary": "Lists an overview of form instances assigned to the current user.",
                "description": "Returns a list of form instances assigned to the current user, optionally filtered and\/or sorted.",
                "operationId": "get_list_assigned_form_instances",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "parent_id",
                        "in": "query",
                        "description": "Return only items belonging to the given parent form",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "Return only items for the given project",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "responsible_employee_id",
                        "in": "query",
                        "description": "Return only items the given employee is responsible for",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only items with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/FormInstanceStatus"
                        }
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/FormInstanceSortField"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of form instances",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/FormInstanceListItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form": {
            "get": {
                "tags": [
                    "Form"
                ],
                "summary": "Lists an overview of forms.",
                "description": "Returns a list of forms.",
                "operationId": "get_list_forms",
                "parameters": [
                    {
                        "name": "active",
                        "in": "query",
                        "description": "Whether to return active (true) or inactive (false) forms, defaults to true",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": "true"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of forms",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/FormListItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/instance\/{instanceId}\/send-reminder": {
            "post": {
                "tags": [
                    "Form"
                ],
                "summary": "Send a reminder to an assignee a form instance has yet to be submitted.",
                "description": "Assigned employee is reminded by way of a push notification.",
                "operationId": "post_form_instance_reminder",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/instance\/self-assign\/{instanceId}\/file\/{fileId}": {
            "delete": {
                "tags": [
                    "Form"
                ],
                "summary": "Adds a file to a form instance.",
                "operationId": "delete_remove_file_from_self_assigned_form_instance",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/instance\/self-assign": {
            "post": {
                "tags": [
                    "Form"
                ],
                "summary": "Create a new form instance, assigned to the current user.",
                "description": "Creates a new form instance using the information passed in the body. Form data is copied from the given template. Form is assigned to the current user.",
                "operationId": "post_self_assign_form_instance",
                "requestBody": {
                    "description": "New form instance",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/SelfAssignFormInstanceParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/form\/instance\/self-assign\/{instanceId}": {
            "put": {
                "tags": [
                    "Form"
                ],
                "summary": "Update a form instance assigned to the current user.",
                "description": "Allows for updating the data\/metadata\/status of a form assigned to the current user. Modifying the status from pending -> submitted is only allowed once.",
                "operationId": "put_update_self_assigned_form_instance",
                "parameters": [
                    {
                        "name": "instanceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Updated form instance",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateSelfAssignedParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me\/file\/{fileId}": {
            "get": {
                "tags": [
                    "General"
                ],
                "summary": "Get a file for the current employee.",
                "operationId": "get_get_current_employee_file",
                "parameters": [
                    {
                        "name": "fileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "General"
                ],
                "summary": "Acknowledges a file for the current user.",
                "operationId": "put_acknowkedge_current_employee_file",
                "parameters": [
                    {
                        "name": "fileId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me\/file": {
            "post": {
                "tags": [
                    "General"
                ],
                "summary": "Adds a file to the current employee.",
                "operationId": "post_add_current_employee_file",
                "requestBody": {
                    "description": "New file",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "title": {
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me": {
            "get": {
                "tags": [
                    "General"
                ],
                "summary": "Get current employee details.",
                "description": "Returns detailed information about the current employee.",
                "operationId": "get_current_user",
                "responses": {
                    "200": {
                        "description": "Employee details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Employee"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "General"
                ],
                "summary": "Update data for the current user.",
                "description": "Allows for updating your own data.",
                "operationId": "put_update_own_data",
                "requestBody": {
                    "description": "New values",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ChangeOwnDataType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me\/password": {
            "put": {
                "tags": [
                    "General"
                ],
                "summary": "Update password for the current user.",
                "description": "Allows for updating your own password.",
                "operationId": "put_update_own_password",
                "requestBody": {
                    "description": "New password",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ChangeOwnPasswordType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me\/group": {
            "get": {
                "tags": [
                    "General"
                ],
                "summary": "Get current employee group.",
                "description": "Returns a list of employee ID's the current user is grouped with, for a given week.",
                "operationId": "get_current_group",
                "parameters": [
                    {
                        "name": "week",
                        "in": "query",
                        "description": "Week to check for group. If omitted defaults to current ISO week number",
                        "required": false,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Year to check for group. If omitted defaults to current ISO week numbering year.",
                        "required": false,
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Employee group",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/EmployeeGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me\/settings": {
            "get": {
                "tags": [
                    "General"
                ],
                "summary": "Retrieve user settings.",
                "description": "Returns the values for all the settings currently set.",
                "operationId": "get_user_get_settings",
                "responses": {
                    "200": {
                        "description": "List of settings",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/SettingOverview"
                                    }
                                }
                            }
                        }
                    },
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/device": {
            "post": {
                "tags": [
                    "Device"
                ],
                "summary": "Register a device.",
                "description": "Registers a device with the backend, mostly for messaging purposes.",
                "operationId": "post_register_device",
                "requestBody": {
                    "description": "Device info",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/RegisterDeviceType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Device"
                ],
                "summary": "Deregister a device.",
                "description": "Deregisters a device with the backend.",
                "operationId": "delete_deregister_device",
                "requestBody": {
                    "description": "Device info",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/DeregisterDeviceType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me\/do-reset-password": {
            "post": {
                "tags": [
                    "General"
                ],
                "summary": "Executes a password reset.",
                "description": "Executes a password reset, using a code obtained from a reset email.",
                "operationId": "post_do_password_reset",
                "requestBody": {
                    "description": "Reset info",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/DoPasswordResetParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    }
                }
            }
        },
        "\/api\/external-token": {
            "post": {
                "tags": [
                    "General"
                ],
                "summary": "Generate external token.",
                "description": "Generates a new external token to be used with the `external_token` grant type to get a new set of oauth tokens. External tokens are valud for 5 mins.",
                "operationId": "post_generate_external_token",
                "responses": {
                    "200": {
                        "description": "External token",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me\/reset-password": {
            "post": {
                "tags": [
                    "General"
                ],
                "summary": "Request a password reset.",
                "description": "Requests a password reset for the given username.",
                "operationId": "post_request_password_reset",
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The username to request a reset for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    }
                }
            }
        },
        "\/api\/inspection": {
            "get": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Lists an overview of inspections.",
                "description": "Returns a list of inspections, optionally filtered.",
                "operationId": "get_list_inspections",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only inspections with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/InspectionStatus"
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Returns only inspections with one of the given statuses",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#\/components\/schemas\/InspectionStatus"
                            }
                        }
                    },
                    {
                        "name": "employee_id",
                        "in": "query",
                        "description": "Returns only items belonging to the given employee",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "project_ids",
                        "in": "query",
                        "description": "Returns only inspections for one of the given projects",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "project_leader_ids",
                        "in": "query",
                        "description": "Returns only inspections for one of the given project leaders",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "order_by",
                        "in": "query",
                        "description": "Order results by this field, only does something when order_dir is also given",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "completed_at",
                                "status"
                            ]
                        }
                    },
                    {
                        "name": "order_dir",
                        "in": "query",
                        "description": "Order results in this order, only does something when order_dir is also given",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of inspections",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Inspection"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Create a new inspection.",
                "description": "Creates a new inspection using the information passed in the body.",
                "operationId": "post_create_inspection",
                "requestBody": {
                    "description": "New inspection",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateInspectionType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me\/inspection": {
            "get": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Lists an overview of own inspections.",
                "description": "Returns a list of open inspections, by the current user.",
                "operationId": "get_me_list_inspections",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of inspections",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Inspection"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Create a new inspection by current user.",
                "description": "Creates a new inspection by the current user using the information passed in the body.",
                "operationId": "post_me_create_inspection",
                "requestBody": {
                    "description": "New inspection",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateInspectionType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/inspection\/{id}\/image": {
            "post": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Add images to an inspection.",
                "description": "Adds images to an existing inspection. Only allowed if the inspection is owned by the current user.",
                "operationId": "post_inspection_images",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New inspection image",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/AddInspectionImageType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/ImageAdded"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/inspection\/multiple": {
            "post": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Batch create inspections.",
                "description": "Creates multiple new inspections using the information passed in the body.",
                "operationId": "post_create_multiple_inspection",
                "requestBody": {
                    "description": "New inspections",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateMultipleInspectionType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/inspection\/{id}": {
            "get": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Get inspection details.",
                "description": "Returns detailed information about a given inspection.",
                "operationId": "get_get_inspection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inspection details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Inspection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Update an existing inspection.",
                "description": "Update an existing inspection using the information passed in the body.",
                "operationId": "put_update_inspection",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New inspection values",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateInspectionType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/inspection\/{id}\/pdf": {
            "get": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Get inspection result pdf.",
                "description": "Returns an inspection result formatted as a pdf.",
                "operationId": "get_get_inspection_pdf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/Pdf"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/inspection\/{id}\/result": {
            "get": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Get inspection result.",
                "description": "Returns the result of a given inspection.",
                "operationId": "get_inspection_result",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Inspection details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InspectionResult"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/inspection\/template": {
            "get": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Get inspection template.",
                "description": "Returns the inspection template.",
                "operationId": "get_inspection_template",
                "responses": {
                    "200": {
                        "description": "Inspection details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/InspectionTemplate"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/inspection\/{id}\/mark_handled": {
            "put": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Mark inspection as handled.",
                "description": "Marks as inspection as handled.",
                "operationId": "put_inspection_mark_handled",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/inspection\/{id}\/reminder": {
            "post": {
                "tags": [
                    "Inspection"
                ],
                "summary": "Send inspection reminder.",
                "description": "Sends a reminder about the given inspection.",
                "operationId": "post_inspection_reminder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/leave-request": {
            "get": {
                "tags": [
                    "Leave Request"
                ],
                "summary": "Lists an overview of leave requests.",
                "description": "Returns a list of leave requests, optionally filtered by status.",
                "operationId": "get_list_leave_requests",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only leave requests with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/EmployeeRequestStatus"
                        }
                    },
                    {
                        "name": "branches",
                        "in": "query",
                        "description": "Return only items for one of the given employee branches",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "manager_ids",
                        "in": "query",
                        "description": "Return only items for employees who have one of the given employees listed as manager",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of leave requests",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/LeaveRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Leave Request"
                ],
                "summary": "Create a new leave request.",
                "description": "Creates a new leave request using the information passed in the body.",
                "operationId": "post_create_leave_request",
                "requestBody": {
                    "description": "New leave request",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateLeaveRequestType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/leave-request\/export": {
            "get": {
                "tags": [
                    "Leave Request"
                ],
                "summary": "Get leave request csv export.",
                "description": "Returns an export of leave requests in csv format.",
                "operationId": "get_leave_request_csv_export",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only leave requests with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/EmployeeRequestStatus"
                        }
                    },
                    {
                        "name": "branches",
                        "in": "query",
                        "description": "Return only items for one of the given employee branches",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "manager_ids",
                        "in": "query",
                        "description": "Return only items for employees who have one of the given employees listed as manager",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date, defaults to '+1 month'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/Csv"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/leave-balance\/import": {
            "post": {
                "tags": [
                    "Leave Request"
                ],
                "summary": "Import leave balance.",
                "description": "Perform a mass update of leave balances accross employees.",
                "operationId": "post_leave_balance_import",
                "requestBody": {
                    "description": "Leave balance data",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ImportLeaveBalanceType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "List of employees not found\/updated",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ImportLeaveBalanceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/my-leave-request": {
            "get": {
                "tags": [
                    "Leave Request"
                ],
                "summary": "Lists an overview of own leave requests.",
                "description": "Returns a list of the current user's leave requests.",
                "operationId": "get_list_own_leave_requests",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date, defaults to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of leave requests",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/LeaveRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/leave-request\/{id}": {
            "put": {
                "tags": [
                    "Leave Request"
                ],
                "summary": "Update an existing leave request.",
                "description": "Update an existing leave request using the information passed in the body.",
                "operationId": "put_update_leave_request",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New leave request values",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateLeaveRequestStatusType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/news\/{id}\/images": {
            "post": {
                "tags": [
                    "News"
                ],
                "summary": "Add an image to a news item.",
                "description": "Add an image to an existing news item.",
                "operationId": "post_news_images_add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New news image",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/AddImageType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/NewsImageAdded"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/news": {
            "get": {
                "tags": [
                    "News"
                ],
                "summary": "Lists an overview of news items.",
                "description": "Returns a list of news items.",
                "operationId": "get_news_overview",
                "parameters": [
                    {
                        "name": "knowledge_tag_ids",
                        "in": "query",
                        "description": "Return only news items with one of the given knowledge tags",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Return news where given string (partially) matches the title",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of news items",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/NewsOverviewItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "News"
                ],
                "summary": "Create news.",
                "description": "Creates a new news item using the information passed in the body.",
                "operationId": "post_news_create",
                "requestBody": {
                    "description": "New news item",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateNewsType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/news\/{id}": {
            "get": {
                "tags": [
                    "News"
                ],
                "summary": "Get news item details.",
                "description": "Returns detailed information about a given news item.",
                "operationId": "get_news_detail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "News item details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/NewsDetailItem"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "News"
                ],
                "summary": "Update an existing news item.",
                "description": "Update an existing news item using the information passed in the body.",
                "operationId": "put_news_update",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New news item values",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateNewsType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/news\/archive": {
            "get": {
                "tags": [
                    "News"
                ],
                "summary": "Lists an overview of archived news items.",
                "description": "Returns a list of archived news items.",
                "operationId": "get_news_overview_archived",
                "parameters": [
                    {
                        "name": "knowledge_tag_ids",
                        "in": "query",
                        "description": "Return only news items with one of the given knowledge tags",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Return news where given string (partially) matches the title",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of news items",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/NewsOverviewItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/news\/{id}\/push": {
            "post": {
                "tags": [
                    "News"
                ],
                "summary": "Send news push.",
                "description": "Sends a push message about the given news item.",
                "operationId": "post_news_push",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/news\/{id}\/gallery": {
            "post": {
                "tags": [
                    "News"
                ],
                "summary": "Update news item gallery.",
                "description": "Update an existing news item using new images passed in the body.",
                "operationId": "post_news_update_gallery",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New news images",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateNewsGalleryType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "News"
                ],
                "summary": "Delete news images.",
                "description": "Removes images from a news item using the information passed in the body.",
                "operationId": "delete_news_remove_gallery",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Images to remove",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/RemoveGalleryImagesType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/news\/{id}\/image": {
            "post": {
                "tags": [
                    "News"
                ],
                "summary": "Update image for a news item.",
                "description": "Updates an image for an existing news item.",
                "operationId": "post_news_image",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New news image",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateNewsImagesType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/news\/{id}\/status": {
            "put": {
                "tags": [
                    "News"
                ],
                "summary": "Update an existing news item's status.",
                "description": "Update an existing news item with a new status passed in the body.",
                "operationId": "put_news_update_status",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New news item status",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateNewsStatusType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/order": {
            "get": {
                "tags": [
                    "Order"
                ],
                "summary": "Lists an overview of orders.",
                "description": "Returns a list of orders.",
                "operationId": "get_list_orders",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Return only orders with the given type",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/OrderType"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only orders with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/OrderStatus"
                        }
                    },
                    {
                        "name": "employee_ids",
                        "in": "query",
                        "description": "Returns only orders for one of the given employees",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of orders",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Order"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Order"
                ],
                "summary": "Create an order.",
                "description": "Creates a new order using the information passed in the body.",
                "operationId": "post_create_order",
                "requestBody": {
                    "description": "New order",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateOrderType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/my-order": {
            "get": {
                "tags": [
                    "Order"
                ],
                "summary": "Lists an overview of own orders.",
                "description": "Returns a list of the current user's orders.",
                "operationId": "get_list_own_orders",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Return only orders with the given type",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/OrderType"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only orders with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/OrderStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of orders",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Order"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/order\/{id}": {
            "put": {
                "tags": [
                    "Order"
                ],
                "summary": "Update order status.",
                "description": "Update an existing order using the information passed in the body.",
                "operationId": "put_update_order",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New order status",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateOrderType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/project": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Lists an overview of projects.",
                "description": "Returns a list of projects.",
                "operationId": "get_list_projects",
                "parameters": [
                    {
                        "name": "branch",
                        "in": "query",
                        "description": "Return only items for the given branch",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Return projects where given string (partially) matches either project name, code or project lead name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "minimal_output",
                        "in": "query",
                        "description": "Minimizes output per project to id, name, code",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of projects",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Project"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Create a project.",
                "description": "Creates a new project using the information passed in the body.",
                "operationId": "post_create_project",
                "requestBody": {
                    "description": "New project",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateProjectType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/project\/{id}\/files": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Lists an overview of project files.",
                "description": "Returns a list of project files.",
                "operationId": "get_overview_project_file",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of projects",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/ProjectFile"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Add a file to a project.",
                "description": "Add a file to an existing project.",
                "operationId": "post_add_project_file",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New project file",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/AddProjectFileType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/project\/{id}": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Lists details of a project.",
                "description": "Returns detailed view of a project.",
                "operationId": "get_get_project",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project details",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Project"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Order"
                ],
                "summary": "Update project.",
                "description": "Update an existing project using the information passed in the body.",
                "operationId": "put_update_project",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New project values",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateProjectType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/project_files\/{id}\/download": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Get project file contents.",
                "description": "Returns the contents of a project file.",
                "operationId": "get_download_project_file",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/Download"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/project\/import": {
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "Import projects.",
                "description": "Perform a mass import of projects.",
                "operationId": "post_import_project",
                "requestBody": {
                    "description": "Project data",
                    "required": true,
                    "content": {
                        "multipart\/form-data": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ProjectImport"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "List of projects (not) imported",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ImportResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/narrowcasting\/project": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "Lists an overview of projects.",
                "description": "Returns a list of projects.",
                "operationId": "get_narrowcasting_list_projects",
                "parameters": [
                    {
                        "name": "branch",
                        "in": "query",
                        "description": "Return only items for the given branch",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Return projects where given string (partially) matches either project name, code or project lead name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "minimal_output",
                        "in": "query",
                        "description": "Minimizes output per project to id, name, code",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of projects",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Project"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/project_files\/{id}": {
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "Remove project file.",
                "description": "Removes a file from a project by file id.",
                "operationId": "delete_remove_project_file",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/order": {
            "post": {
                "tags": [
                    "TOP"
                ],
                "summary": "Creates a new order.",
                "description": "Creates a new order with the given params in the TOP system and immediately finalizes it.",
                "operationId": "post_create_top_order",
                "requestBody": {
                    "description": "Order info",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateOrderParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/me\/top\/enrollments": {
            "get": {
                "tags": [
                    "TOP - User scoped"
                ],
                "summary": "Lists all enrollments in TOP for current user.",
                "description": "Returns a list of participants. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_all_enrollments_for_current_user",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "search_filter",
                        "in": "query",
                        "description": "Text to filter items against",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "provider_ids",
                        "in": "query",
                        "description": "Only return enrollments for given provider ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "schema": "GetOwnEnrollments",
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Only return enrollments for given statuses",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "schema": "GetOwnEnrollments",
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Only return enrollments for given product id",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/disciplines": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists all disciplines (NL: vakgebieden) in TOP.",
                "description": "Returns a list of disciplines. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_disciplines",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "description": "Filter on only active\/inactive disciplines",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/enrollments": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists all enrollments in TOP.",
                "description": "Returns a list of participants. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_all_enrollments",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "search_filter",
                        "in": "query",
                        "description": "Text to filter items against",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "provider_ids",
                        "in": "query",
                        "description": "Only return enrollments for given provider ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "schema": "GetEnrollments",
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Only return enrollments for given statuses",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "schema": "GetEnrollments",
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Only return enrollments for given product id",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "employee_id",
                        "in": "query",
                        "description": "Only return enrollments for given employee id",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/function-profiles\/{id}": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Returns details for a function profile in TOP.",
                "description": "Returns a detailed overview of a given function profile. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_function_profile_details",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/function-profiles": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists all function profiles in TOP.",
                "description": "Returns a list of function profiles. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_function_profiles",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/invoice-entities": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists all invoice entities in TOP.",
                "description": "Returns a list of available invoice entities. These are used when making an order for address data.\nSee https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_all_invoice_entities",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/levels": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists all levels in TOP.",
                "description": "Returns a list of levels. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_levels",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/ltos": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists all LTOs in TOP.",
                "description": "Returns a list of available LTOs. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_all_ltos",
                "parameters": [
                    {
                        "name": "search_filter",
                        "in": "query",
                        "description": "Search for a lto",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/products\/{id}\/events": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Returns a list of events for a product in TOP.",
                "description": "Returns a list of events for a given product. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_product_event_list",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Return only events after this date",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Return only events before this date",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "city",
                        "in": "query",
                        "description": "Filter by city",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variant",
                        "in": "query",
                        "description": "Filter by variant",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/products\/{id}": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Returns details for a product in TOP.",
                "description": "Returns a detailed overview of a given product. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_product_details",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/products": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists all products in TOP.",
                "description": "Returns a list of available products. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_all_products",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "search_filter",
                        "in": "query",
                        "description": "Search for a product",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Exactly match on product name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "provider_name",
                        "in": "query",
                        "description": "Exactly match on provider name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "provider_ids",
                        "in": "query",
                        "description": "Filter on a list of provider ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "schema": "GetProducts",
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "subdiscipline_ids",
                        "in": "query",
                        "description": "Filter on a list of subdiscipline ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "schema": "GetProducts",
                                "type": "int"
                            }
                        }
                    },
                    {
                        "name": "level_ids",
                        "in": "query",
                        "description": "Filter on a list of level ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "schema": "GetProducts",
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "lto_ids",
                        "in": "query",
                        "description": "Filter on a list of lto ids",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "schema": "GetProducts",
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/provider\/{id}\/logo": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Returns details for a provider logo in TOP.",
                "description": "Returns detail about a provider's logo (including the actual image). See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_provider_logo",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/providers": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Returns the TOP provider list.",
                "description": "Returns a list of available product providers. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_providers",
                "parameters": [
                    {
                        "name": "search_filter",
                        "in": "query",
                        "description": "Search for a product",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/subdisciplines": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists all subdisciplines (NL: disciplines) in TOP.",
                "description": "Returns a list of subdisciplines. See https:\/\/api-ex.stag-top.nl\/swagger\/index.html for response schema.",
                "operationId": "get_top_get_subdisciplines",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "description": "Filter on only active\/inactive disciplines",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sort_field",
                        "in": "query",
                        "description": "Field to sort by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#\/components\/parameters\/sort_order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response as returned by TOP"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/training-request": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists an overview of training requests.",
                "description": "Returns a list of training requests, optionally filtered.",
                "operationId": "get_list_training_requests",
                "parameters": [
                    {
                        "$ref": "#\/components\/parameters\/pagination_offset"
                    },
                    {
                        "$ref": "#\/components\/parameters\/pagination_limit"
                    },
                    {
                        "name": "employee_id",
                        "in": "query",
                        "description": "Return only requests for the given employee",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Return only requests for the given product",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only compensation requests with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/EmployeeRequestStatus"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Return items where string matches against product name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branches",
                        "in": "query",
                        "description": "Search by employee branch",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "manager_ids",
                        "in": "query",
                        "description": "Return only items for employees who have one of the given employees listed as manager",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of compensation requests",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/TrainingRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "TOP"
                ],
                "summary": "Creates a new training request.",
                "description": "Creates a new training request for the current user.",
                "operationId": "post_create_training_request",
                "requestBody": {
                    "description": "Training request info",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateTrainingRequestParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/my-training-request": {
            "get": {
                "tags": [
                    "TOP"
                ],
                "summary": "Lists an overview of training requests.",
                "description": "Returns a list of training requests, optionally filtered.",
                "operationId": "get_list_own_training_requests",
                "parameters": [
                    {
                        "name": "product_id",
                        "in": "query",
                        "description": "Return only requests for the given product",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Return only compensation requests with the given status",
                        "required": false,
                        "schema": {
                            "$ref": "#\/components\/schemas\/EmployeeRequestStatus"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Return items where string matches against product name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "branches",
                        "in": "query",
                        "description": "Search by employee branch",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "manager_ids",
                        "in": "query",
                        "description": "Return only items for employees who have one of the given employees listed as manager",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of compensation requests",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/TrainingRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/top\/training-request\/{id}": {
            "put": {
                "tags": [
                    "TOP"
                ],
                "summary": "Processes a training request.",
                "description": "Processes a training request using the given new status.",
                "operationId": "put_process_training_request",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Training request status",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/ProcessTrainingRequestParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/worklog": {
            "get": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Lists an overview of worklogs.",
                "description": "Returns a list of worklogs.",
                "operationId": "get_worklog_overview",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date, defaults to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "employee_ids",
                        "in": "query",
                        "description": "Return only items for the given employees",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "project_ids",
                        "in": "query",
                        "description": "Return only items for the given project",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "titles",
                        "in": "query",
                        "description": "Return only items for the given employee title",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "branches",
                        "in": "query",
                        "description": "Return only items for the given employee branch",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "manager_ids",
                        "in": "query",
                        "description": "Return only items for employees who have one of the given employees listed as manager",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of worklogs",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Worklog"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Create a worklog.",
                "description": "Creates a new worklog using the information passed in the body.",
                "operationId": "post_create_worklog",
                "requestBody": {
                    "description": "New worklog",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateWorklogType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/worklog\/lock\/batch": {
            "post": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Create multiple worklog locks at once.",
                "description": "Allows creating multiple worklog locks in one go. Combinations that already exist are silently ignored",
                "operationId": "post_batch_create_lock",
                "requestBody": {
                    "description": "New worklog locks",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/BatchCreateWorklogLockParameters"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/worklog\/locked": {
            "get": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Lists worklog locks for current user.",
                "description": "Returns a list of worklog logs for the current user.",
                "operationId": "get_check_lock",
                "responses": {
                    "200": {
                        "description": "List of locks",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/WorklogLockCheckListItem"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/worklog\/lock": {
            "get": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Lists worklog locks.",
                "description": "Returns a list of worklog locks, for a given week.",
                "operationId": "get_lock_overview",
                "parameters": [
                    {
                        "name": "week",
                        "in": "query",
                        "description": "Week to check for group. If omitted defaults to current ISO week number",
                        "required": false,
                        "schema": {
                            "type": "int"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Year to check for group. If omitted defaults to current ISO week numbering year.",
                        "required": false,
                        "schema": {
                            "type": "int"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of worklog locks",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/WorklogLock"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Create a worklog lock.",
                "description": "Creates a new worklog lock using the information passed in the body.",
                "operationId": "post_create_lock",
                "requestBody": {
                    "description": "New worklog lock",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateWorklogLockType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Remove a worklog.",
                "description": "Deletes an existing worklog.",
                "operationId": "delete_remove_lock",
                "requestBody": {
                    "description": "Lock to remove",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/RemoveWorklogLockType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/worklog\/export": {
            "get": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Get worklog csv export.",
                "description": "Returns an export of worklogs in csv format.",
                "operationId": "get_worklog_csv_export",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date, defaults to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "employee_ids",
                        "in": "query",
                        "description": "Return only items for the given employees",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "project_ids",
                        "in": "query",
                        "description": "Return only items for the given project",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "titles",
                        "in": "query",
                        "description": "Return only items for the given employee title",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "branches",
                        "in": "query",
                        "description": "Return only items for the given employee branch",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "manager_ids",
                        "in": "query",
                        "description": "Return only items for employees who have one of the given employees listed as manager",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#\/components\/responses\/Csv"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/my-worklog": {
            "get": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Lists an overview of own worklogs.",
                "description": "Returns a list of worklogs of the current user.",
                "operationId": "get_list_own_worklogs",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Returns only items after given date, default to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Returns only items before given date, defaults to 'now'",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "Y-m-d\\TH:i:sP"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of worklogs",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/Worklog"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/worklog\/{id}": {
            "put": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Update worklog.",
                "description": "Update an existing worklog using the information passed in the body.",
                "operationId": "put_update_worklog",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New worklog values",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateWorkLogType"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Remove a worklog.",
                "description": "Deletes an existing worklog.",
                "operationId": "delete_remove_worklog",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/worklog\/remind\/{id}": {
            "post": {
                "tags": [
                    "Worklog"
                ],
                "summary": "Send worklog reminder.",
                "description": "Sends a push message to remind an employee about logging work.",
                "operationId": "post_send_reminder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "pattern": "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#\/components\/responses\/204"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "\/api\/loket\/auth\/init": {
            "post": {
                "tags": [
                    "Deprecated?"
                ],
                "operationId": "post_loket_auth_init",
                "responses": {
                    "default": {
                        "description": ""
                    }
                }
            }
        },
        "\/api\/loket\/auth\/save_tokens": {
            "post": {
                "tags": [
                    "Deprecated?"
                ],
                "operationId": "post_loket_auth_save_token",
                "responses": {
                    "default": {
                        "description": ""
                    }
                }
            }
        },
        "\/api\/me\/payslips": {
            "get": {
                "tags": [
                    "Deprecated?"
                ],
                "operationId": "get_loket_payslips_by_employee",
                "responses": {
                    "default": {
                        "description": ""
                    }
                }
            }
        },
        "\/api\/me\/payslips\/{payrollrun_id}": {
            "get": {
                "tags": [
                    "Deprecated?"
                ],
                "operationId": "get_loket_payslips_pdf_download",
                "parameters": [
                    {
                        "name": "payrollrun_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": ""
                    }
                }
            }
        },
        "\/api\/me\/yearendstatements": {
            "get": {
                "tags": [
                    "Deprecated?"
                ],
                "operationId": "get_loket_yearendstatements_by_employee",
                "responses": {
                    "default": {
                        "description": ""
                    }
                }
            }
        },
        "\/api\/me\/yearendstatements\/{year}": {
            "get": {
                "tags": [
                    "Deprecated?"
                ],
                "operationId": "get_loket_yearendstatements_pdf_download",
                "parameters": [
                    {
                        "name": "year",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": ""
                    }
                }
            }
        },
        "\/api\/settings": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Retrieve settings.",
                "description": "Returns the values for all the settings currently set.",
                "operationId": "get_setting_overview",
                "responses": {
                    "200": {
                        "description": "List of settings",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#\/components\/schemas\/SettingOverview"
                                    }
                                }
                            }
                        }
                    },
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update a setting key's value.",
                "description": "Updates a given setting key's value to the value given.",
                "operationId": "put_setting_update",
                "requestBody": {
                    "description": "Key and new value",
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateSettingType"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "$ref": "#\/components\/responses\/201"
                    },
                    "400": {
                        "$ref": "#\/components\/responses\/400"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/401"
                    }
                },
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ErrorMessage": {
                "properties": {
                    "error": {
                        "properties": {
                            "code": {
                                "type": "integer"
                            },
                            "message": {
                                "type": "string",
                                "nullable": true
                            },
                            "errors": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "nullable": true
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "EntityCreatedResponse": {
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "description": "uuid",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BadRequestResponse": {
                "required": [
                    "code"
                ],
                "properties": {
                    "code": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "object",
                        "example": {
                            "email": "This field cannot be empty"
                        },
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "BatchResponse": {
                "type": "array",
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#\/components\/schemas\/EntityCreatedResponse"
                        },
                        {
                            "$ref": "#\/components\/schemas\/BadRequestResponse"
                        }
                    ]
                }
            },
            "CatalogListItem": {
                "properties": {
                    "catalog_type": {
                        "$ref": "#\/components\/schemas\/OrderType"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "extra_information": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "options": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "OrderType": {
                "type": "string",
                "enum": [
                    "clothing",
                    "pbm",
                    "first_aid"
                ]
            },
            "EmployeeGroupOverview": {
                "type": "object",
                "example": {
                    "1b593e69-4e4d-4432-a6e7-d3af5cb57dd3": "c2e4bcdc-8353-410f-ac63-bba45bc72515"
                },
                "additionalProperties": {
                    "description": "Map of employee id to group id",
                    "type": "string"
                }
            },
            "EmployeeGroup": {
                "type": "array",
                "items": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "InspectionResult": {
                "properties": {
                    "version": {
                        "type": "integer"
                    },
                    "questions": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "label": {
                                    "type": "string"
                                },
                                "answer": {
                                    "type": "string"
                                },
                                "comments": {
                                    "type": "string"
                                },
                                "images": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    },
                    "comments": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "InspectionTemplate": {
                "properties": {
                    "version": {
                        "type": "integer"
                    },
                    "questions": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "label": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "InspectionStatus": {
                "type": "string",
                "enum": [
                    "open",
                    "action_required",
                    "no_action_required",
                    "handled"
                ]
            },
            "EmployeeRequestStatus": {
                "type": "string",
                "enum": [
                    "pending",
                    "granted",
                    "denied"
                ]
            },
            "FormInstanceStatus": {
                "type": "string",
                "enum": [
                    "pending",
                    "submitted",
                    "approved"
                ]
            },
            "FormInstanceSortField": {
                "type": "string",
                "enum": [
                    "createdAt",
                    "submitDate",
                    "approveDate"
                ]
            },
            "ImportLeaveBalanceResponse": {
                "properties": {
                    "employees_updated": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "employees_not_found": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "OrderStatus": {
                "type": "string",
                "enum": [
                    "open",
                    "ready",
                    "rejected"
                ]
            },
            "ProjectImport": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary"
                    }
                },
                "type": "object"
            },
            "VisibilityLevel": {
                "type": "string",
                "enum": [
                    "all",
                    "branch_only",
                    "none"
                ]
            },
            "CheckAvailabilityResponse": {
                "type": "object",
                "example": {
                    "72f1ab79-cfbc-46ff-a009-c9cf4af478c1": true,
                    "148582fa-f88e-4506-8789-61e6cd192be3": false
                },
                "additionalProperties": {
                    "type": "boolean"
                }
            },
            "MaritalStatus": {
                "type": "string",
                "enum": [
                    "unknown",
                    "not_married",
                    "married",
                    "cohabitating",
                    "civil_unionship"
                ]
            },
            "ContractType": {
                "type": "string",
                "enum": [
                    "permanent",
                    "temporary",
                    "loan",
                    "other"
                ]
            },
            "AgendaOverviewItem": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "location": {
                        "type": "string",
                        "nullable": true
                    },
                    "start_time": {
                        "type": "string"
                    },
                    "end_time": {
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    },
                    "all_day": {
                        "type": "boolean"
                    },
                    "branches": {
                        "schema": {
                            "type": "array",
                            "items": "string"
                        },
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "CreateAgendaType": {
                "required": [
                    "title",
                    "start_time",
                    "end_time",
                    "category",
                    "all_day",
                    "branches"
                ],
                "properties": {
                    "id": {},
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "start_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "category": {
                        "type": "string",
                        "enum": [
                            "birthday",
                            "anniversary",
                            "activity",
                            "information_evening",
                            "other"
                        ]
                    },
                    "all_day": {
                        "type": "boolean"
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateAgendaType": {
                "required": [
                    "title",
                    "start_time",
                    "end_time",
                    "category",
                    "all_day",
                    "branches"
                ],
                "properties": {
                    "id": {},
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "start_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "category": {
                        "type": "string",
                        "enum": [
                            "birthday",
                            "anniversary",
                            "activity",
                            "information_evening",
                            "other"
                        ]
                    },
                    "all_day": {
                        "type": "boolean"
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "Assignment": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "assignee_id": {
                        "type": "string"
                    },
                    "assignee": {
                        "$ref": "#\/components\/schemas\/EmployeeListItem"
                    },
                    "date": {
                        "type": "string"
                    },
                    "end_date": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "leave_type": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "remarks": {
                        "type": "string"
                    },
                    "project": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#\/components\/schemas\/Project"
                            }
                        ]
                    },
                    "creator": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#\/components\/schemas\/EmployeeListItem"
                            }
                        ]
                    },
                    "course_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "course_provider": {
                        "type": "string",
                        "nullable": true
                    },
                    "course_location": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateAssignmentType": {
                "required": [
                    "assignee_id",
                    "date",
                    "type"
                ],
                "properties": {
                    "id": {},
                    "assignee_id": {
                        "type": "string"
                    },
                    "creator_id": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "string"
                    },
                    "leave_type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "remarks": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BatchRemoveAssignmentType": {
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NotifyEmployeeType": {
                "required": [
                    "employee_id"
                ],
                "properties": {
                    "employee_id": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Catalog": {
                "properties": {
                    "catalog_type": {
                        "type": "string"
                    },
                    "products": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CatalogListItem"
                        }
                    }
                },
                "type": "object"
            },
            "CompensationRequest": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "employee_id": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "manual_input": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "processed_by": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateCompensationRequestType": {
                "required": [
                    "date",
                    "type",
                    "description"
                ],
                "properties": {
                    "id": {},
                    "employee_id": {},
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "string"
                    },
                    "manual_input": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProcessCompensationRequestType": {
                "required": [
                    "status"
                ],
                "properties": {
                    "id": {},
                    "processor_id": {},
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "granted",
                            "denied"
                        ]
                    }
                },
                "type": "object"
            },
            "EmployeeListItem": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "plannable": {
                        "type": "boolean"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "roles": {
                        "schema": {
                            "type": "array",
                            "items": "string"
                        },
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "infix": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "branch": {
                        "type": "string"
                    },
                    "dirty": {
                        "type": "boolean"
                    },
                    "leave_balance": {
                        "type": "integer"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "managerId": {
                        "type": "string",
                        "nullable": true
                    },
                    "knowledge_tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/KnowledgeTag"
                        }
                    }
                },
                "type": "object"
            },
            "CreateEmployeeType": {
                "required": [
                    "plannable",
                    "news_visibility",
                    "agenda_visibility",
                    "icon",
                    "email",
                    "password",
                    "roles",
                    "first_name",
                    "last_name",
                    "leave_balance",
                    "branch",
                    "marital_status",
                    "number_of_children",
                    "emergency_contacts"
                ],
                "properties": {
                    "id": {},
                    "plannable": {
                        "type": "boolean"
                    },
                    "news_visibility": {
                        "type": "string",
                        "enum": [
                            "all",
                            "branch_only",
                            "none"
                        ]
                    },
                    "agenda_visibility": {
                        "type": "string",
                        "enum": [
                            "all",
                            "branch_only",
                            "none"
                        ]
                    },
                    "icon": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "corporate_email": {
                        "type": "string"
                    },
                    "infix": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "number": {
                        "type": "integer"
                    },
                    "addition": {
                        "type": "string"
                    },
                    "postal_code": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "phone_number": {
                        "type": "string"
                    },
                    "private_number": {
                        "type": "string"
                    },
                    "leave_balance": {
                        "type": "integer"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "date_of_birth": {
                        "type": "string",
                        "format": "date"
                    },
                    "date_of_employment": {
                        "type": "string",
                        "format": "date"
                    },
                    "marital_status": {
                        "type": "string",
                        "enum": [
                            "not_married",
                            "married",
                            "cohabitating",
                            "civil_unionship",
                            "unknown"
                        ]
                    },
                    "number_of_children": {
                        "type": "integer"
                    },
                    "baptismal_name": {
                        "type": "string"
                    },
                    "private_email": {
                        "type": "string"
                    },
                    "partner_name": {
                        "type": "string"
                    },
                    "partner_date_of_birth": {
                        "type": "string",
                        "format": "date"
                    },
                    "emergency_contacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/EmergencyContactType"
                        }
                    },
                    "external_reference": {
                        "type": "string"
                    },
                    "loket_employer_id": {
                        "type": "string"
                    },
                    "loket_employee_id": {
                        "type": "string"
                    },
                    "loket_employment_id": {
                        "type": "string"
                    },
                    "manager_id": {
                        "type": "string"
                    },
                    "contract_type": {
                        "type": "string",
                        "enum": [
                            "permanent",
                            "temporary",
                            "loan",
                            "other"
                        ]
                    },
                    "initials": {
                        "type": "string"
                    },
                    "place_of_birth": {
                        "type": "string"
                    },
                    "contract_end_date": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "type": "object"
            },
            "LimitedEmployeeListItem": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "infix": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "corporate_email": {
                        "type": "string",
                        "nullable": true
                    },
                    "corporate_phone_number": {
                        "type": "string",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "image": {
                        "type": "string",
                        "nullable": true
                    },
                    "avatar": {
                        "type": "string",
                        "nullable": true
                    },
                    "private_email": {
                        "title": "Only set when this employee has privacy mode disabled.",
                        "type": "string",
                        "nullable": true
                    },
                    "private_phone_number": {
                        "title": "Only set when this employee has privacy mode disabled.",
                        "type": "string",
                        "nullable": true
                    },
                    "date_of_birth": {
                        "title": "Only set when this employee has privacy mode disabled.",
                        "type": "string",
                        "nullable": true
                    },
                    "branch": {
                        "type": "string"
                    },
                    "knowledge_tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/KnowledgeTag"
                        }
                    }
                },
                "type": "object"
            },
            "KnowledgeTag": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateKnowledgeTagParameters": {
                "type": "object"
            },
            "GroupEmployeesType": {
                "required": [
                    "employees",
                    "week_number",
                    "year"
                ],
                "properties": {
                    "employees": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "week_number": {
                        "type": "integer"
                    },
                    "year": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Employee": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "privacy_mode": {
                        "type": "boolean"
                    },
                    "plannable": {
                        "type": "boolean"
                    },
                    "news_visibility": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/VisibilityLevel"
                        },
                        "type": "string"
                    },
                    "agenda_visibility": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/VisibilityLevel"
                        },
                        "type": "string"
                    },
                    "icon": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "infix": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "corporate_email": {
                        "type": "string",
                        "nullable": true
                    },
                    "title": {
                        "type": "string",
                        "nullable": true
                    },
                    "address": {
                        "$ref": "#\/components\/schemas\/OptionalAddress"
                    },
                    "corporate_phone_number": {
                        "type": "string",
                        "nullable": true
                    },
                    "date_of_birth": {
                        "type": "string",
                        "nullable": true
                    },
                    "employee_since": {
                        "type": "string",
                        "nullable": true
                    },
                    "private_phone_number": {
                        "type": "string",
                        "nullable": true
                    },
                    "leave_balance": {
                        "type": "integer"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "baptismal_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "private_email": {
                        "type": "string",
                        "nullable": true
                    },
                    "marital_status": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/MaritalStatus"
                        },
                        "type": "string"
                    },
                    "partner_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "partner_date_of_birth": {
                        "type": "string",
                        "nullable": true
                    },
                    "number_of_children": {
                        "type": "integer"
                    },
                    "emergency_contacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/EmergencyContact"
                        }
                    },
                    "image": {
                        "type": "string",
                        "nullable": true
                    },
                    "avatar": {
                        "type": "string",
                        "nullable": true
                    },
                    "password_change_required": {
                        "type": "boolean"
                    },
                    "dirty": {
                        "type": "boolean"
                    },
                    "external_reference": {
                        "type": "string",
                        "nullable": true
                    },
                    "loket_account": {
                        "$ref": "#\/components\/schemas\/LoketAccount"
                    },
                    "manager": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#\/components\/schemas\/EmployeeListItem"
                            }
                        ]
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/EmployeeFile"
                        }
                    },
                    "knowledge_tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/KnowledgeTag"
                        }
                    },
                    "initials": {
                        "type": "string"
                    },
                    "place_of_birth": {
                        "type": "string"
                    },
                    "contract_end_date": {
                        "type": "string",
                        "nullable": true
                    },
                    "contract_type": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/ContractType"
                        },
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateEmployeeType": {
                "required": [
                    "plannable",
                    "news_visibility",
                    "agenda_visibility",
                    "icon",
                    "email",
                    "roles",
                    "first_name",
                    "last_name",
                    "leave_balance",
                    "branch",
                    "marital_status",
                    "number_of_children",
                    "emergency_contacts",
                    "active",
                    "mark_as_clean"
                ],
                "properties": {
                    "id": {},
                    "plannable": {
                        "type": "boolean"
                    },
                    "news_visibility": {
                        "type": "string",
                        "enum": [
                            "all",
                            "branch_only",
                            "none"
                        ]
                    },
                    "agenda_visibility": {
                        "type": "string",
                        "enum": [
                            "all",
                            "branch_only",
                            "none"
                        ]
                    },
                    "icon": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "corporate_email": {
                        "type": "string"
                    },
                    "infix": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "number": {
                        "type": "integer"
                    },
                    "addition": {
                        "type": "string"
                    },
                    "postal_code": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "phone_number": {
                        "type": "string"
                    },
                    "private_number": {
                        "type": "string"
                    },
                    "leave_balance": {
                        "type": "integer"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "date_of_birth": {
                        "type": "string",
                        "format": "date"
                    },
                    "date_of_employment": {
                        "type": "string",
                        "format": "date"
                    },
                    "marital_status": {
                        "type": "string",
                        "enum": [
                            "not_married",
                            "married",
                            "cohabitating",
                            "civil_unionship",
                            "unknown"
                        ]
                    },
                    "number_of_children": {
                        "type": "integer"
                    },
                    "baptismal_name": {
                        "type": "string"
                    },
                    "private_email": {
                        "type": "string"
                    },
                    "partner_name": {
                        "type": "string"
                    },
                    "partner_date_of_birth": {
                        "type": "string",
                        "format": "date"
                    },
                    "emergency_contacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/EmergencyContactType"
                        }
                    },
                    "active": {
                        "type": "boolean"
                    },
                    "mark_as_clean": {
                        "type": "boolean"
                    },
                    "external_reference": {
                        "type": "string"
                    },
                    "loket_employer_id": {
                        "type": "string"
                    },
                    "loket_employee_id": {
                        "type": "string"
                    },
                    "loket_employment_id": {
                        "type": "string"
                    },
                    "manager_id": {
                        "type": "string"
                    },
                    "contract_type": {
                        "type": "string",
                        "enum": [
                            "permanent",
                            "temporary",
                            "loan",
                            "other"
                        ]
                    },
                    "initials": {
                        "type": "string"
                    },
                    "place_of_birth": {
                        "type": "string"
                    },
                    "contract_end_date": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "type": "object"
            },
            "UpdateEmployeeFileParameters": {
                "type": "object"
            },
            "SendMessageType": {
                "required": [
                    "subject",
                    "body"
                ],
                "properties": {
                    "from_employee_id": {},
                    "to_employee_id": {},
                    "subject": {
                        "type": "string"
                    },
                    "body": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateEmployeeKnowledgeTagsParameters": {
                "required": [
                    "knowledge_tag_ids"
                ],
                "properties": {
                    "knowledge_tag_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateEmployeeImagesType": {
                "required": [
                    "image"
                ],
                "properties": {
                    "id": {},
                    "image": {}
                },
                "type": "object"
            },
            "UpdatePasswordType": {
                "required": [
                    "password"
                ],
                "properties": {
                    "id": {},
                    "password": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateEmployeeStatusType": {
                "required": [
                    "active"
                ],
                "properties": {
                    "id": {},
                    "active": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "LatestExportLog": {
                "properties": {
                    "found": {
                        "type": "boolean"
                    },
                    "start_date": {
                        "type": "string",
                        "nullable": true
                    },
                    "end_date": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "File": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "filesize": {
                        "title": "In bytes.",
                        "type": "string"
                    },
                    "mime_type": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "download_url": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreateFileType": {
                "required": [
                    "title",
                    "version",
                    "file"
                ],
                "properties": {
                    "id": {},
                    "title": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "file": {}
                },
                "type": "object"
            },
            "FormInstanceListItem": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "updated_at": {
                        "type": "string"
                    },
                    "updated_at_by_assignee": {
                        "type": "string",
                        "nullable": true
                    },
                    "submit_date": {
                        "type": "string",
                        "nullable": true
                    },
                    "approve_date": {
                        "type": "string",
                        "nullable": true
                    },
                    "parent_id": {
                        "type": "string"
                    },
                    "assignee_id": {
                        "type": "string"
                    },
                    "responsible_employee_id": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateFormInstanceParameters": {
                "required": [
                    "form_id",
                    "assignee_id",
                    "responsible_employee_id"
                ],
                "properties": {
                    "form_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "assignee_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "responsible_employee_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "project_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "FormInstanceDetails": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "updated_at": {
                        "type": "string"
                    },
                    "updated_at_by_assignee": {
                        "type": "string",
                        "nullable": true
                    },
                    "submit_date": {
                        "type": "string",
                        "nullable": true
                    },
                    "approve_date": {
                        "type": "string",
                        "nullable": true
                    },
                    "parent_id": {
                        "type": "string"
                    },
                    "assignee_id": {
                        "type": "string"
                    },
                    "responsible_employee_id": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "data": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/FormInstanceFile"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateInstanceParameters": {
                "required": [
                    "status",
                    "assignee",
                    "responsible_employee",
                    "data"
                ],
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "submitted",
                            "approved"
                        ],
                        "nullable": true
                    },
                    "assignee": {
                        "type": "string",
                        "nullable": true
                    },
                    "responsible_employee": {
                        "type": "string",
                        "nullable": true
                    },
                    "data": {
                        "type": "string",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "FormListItem": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "data": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "active": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SelfAssignFormInstanceParameters": {
                "required": [
                    "form_id",
                    "responsible_employee_id",
                    "project_id"
                ],
                "properties": {
                    "form_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "responsible_employee_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "project_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateSelfAssignedParameters": {
                "required": [
                    "status",
                    "data"
                ],
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "submitted"
                        ],
                        "nullable": true
                    },
                    "data": {
                        "type": "string",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "ChangeOwnDataType": {
                "required": [
                    "privacy_mode",
                    "first_name",
                    "last_name",
                    "marital_status",
                    "number_of_children",
                    "emergency_contacts"
                ],
                "properties": {
                    "id": {},
                    "privacy_mode": {
                        "type": "boolean"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "corporate_email": {
                        "type": "string"
                    },
                    "infix": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "number": {
                        "type": "integer"
                    },
                    "addition": {
                        "type": "string"
                    },
                    "postal_code": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "phone_number": {
                        "type": "string"
                    },
                    "private_number": {
                        "type": "string"
                    },
                    "marital_status": {
                        "type": "string",
                        "enum": [
                            "not_married",
                            "married",
                            "cohabitating",
                            "civil_unionship",
                            "unknown"
                        ]
                    },
                    "number_of_children": {
                        "type": "integer"
                    },
                    "baptismal_name": {
                        "type": "string"
                    },
                    "private_email": {
                        "type": "string"
                    },
                    "partner_name": {
                        "type": "string"
                    },
                    "partner_date_of_birth": {
                        "type": "string",
                        "format": "date"
                    },
                    "emergency_contacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/EmergencyContactType"
                        }
                    },
                    "initials": {
                        "type": "string"
                    },
                    "place_of_birth": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ChangeOwnPasswordType": {
                "required": [
                    "password",
                    "new_password"
                ],
                "properties": {
                    "id": {},
                    "password": {
                        "type": "string"
                    },
                    "new_password": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SettingOverview": {
                "type": "object"
            },
            "RegisterDeviceType": {
                "required": [
                    "token",
                    "platform",
                    "version"
                ],
                "properties": {
                    "id": {},
                    "employee_id": {},
                    "token": {
                        "type": "string"
                    },
                    "platform": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DeregisterDeviceType": {
                "required": [
                    "token"
                ],
                "properties": {
                    "employee_id": {},
                    "token": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DoPasswordResetParameters": {
                "required": [
                    "code",
                    "new_password"
                ],
                "properties": {
                    "code": {
                        "type": "string",
                        "maxLength": 8,
                        "minLength": 8,
                        "nullable": true
                    },
                    "new_password": {
                        "type": "string",
                        "maxLength": 4096,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Inspection": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "employee_id": {
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#\/components\/schemas\/EmployeeListItem"
                    },
                    "project_id": {
                        "type": "string"
                    },
                    "project": {
                        "$ref": "#\/components\/schemas\/Project"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "completed_at": {
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "type": "string"
                    },
                    "created_by": {
                        "type": "string",
                        "nullable": true
                    },
                    "created_by_employee": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#\/components\/schemas\/EmployeeListItem"
                            }
                        ]
                    },
                    "attendees": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateInspectionType": {
                "required": [
                    "id",
                    "employee_id",
                    "project_id",
                    "created_by",
                    "created_by_app"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "employee_id": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "string"
                    },
                    "created_by": {
                        "type": "string"
                    },
                    "created_by_app": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "AddInspectionImageType": {
                "required": [
                    "inspection_id",
                    "file"
                ],
                "properties": {
                    "inspection_id": {
                        "type": "string"
                    },
                    "file": {}
                },
                "type": "object"
            },
            "CreateMultipleInspectionType": {
                "required": [
                    "id",
                    "employee_ids",
                    "project_id",
                    "created_by"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "employee_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "project_id": {
                        "type": "string"
                    },
                    "created_by": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateInspectionType": {
                "required": [
                    "id",
                    "result"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "result": {
                        "type": "string"
                    },
                    "attendees": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LeaveRequest": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "employee_id": {
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#\/components\/schemas\/Employee"
                    },
                    "start_date": {
                        "type": "string"
                    },
                    "time": {
                        "type": "integer"
                    },
                    "reason": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "processed_by": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateLeaveRequestType": {
                "required": [
                    "start_date",
                    "reason",
                    "time"
                ],
                "properties": {
                    "id": {},
                    "employee_id": {},
                    "start_date": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "reason": {
                        "type": "string"
                    },
                    "time": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "ImportLeaveBalanceType": {
                "required": [
                    "file"
                ],
                "properties": {
                    "file": {}
                },
                "type": "object"
            },
            "UpdateLeaveRequestStatusType": {
                "required": [
                    "status"
                ],
                "properties": {
                    "id": {},
                    "processor": {},
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AddImageType": {
                "required": [
                    "image"
                ],
                "properties": {
                    "id": {},
                    "image": {}
                },
                "type": "object"
            },
            "NewsOverviewItem": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "thumbnail": {
                        "type": "string",
                        "nullable": true
                    },
                    "image": {
                        "type": "string",
                        "nullable": true
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "knowledge_tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/KnowledgeTag"
                        }
                    }
                },
                "type": "object"
            },
            "CreateNewsType": {
                "required": [
                    "title",
                    "text",
                    "branches",
                    "knowledge_tags"
                ],
                "properties": {
                    "id": {},
                    "title": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "knowledge_tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "NewsDetailItem": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "thumbnail": {
                        "type": "string",
                        "nullable": true
                    },
                    "image": {
                        "type": "string",
                        "nullable": true
                    },
                    "gallery": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "knowledge_tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/KnowledgeTag"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateNewsType": {
                "required": [
                    "title",
                    "text",
                    "archived",
                    "branches",
                    "knowledge_tags"
                ],
                "properties": {
                    "id": {},
                    "title": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "archived": {
                        "type": "boolean"
                    },
                    "branches": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "knowledge_tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateNewsGalleryType": {
                "properties": {
                    "id": {},
                    "images": {
                        "type": "array",
                        "items": {}
                    }
                },
                "type": "object"
            },
            "RemoveGalleryImagesType": {
                "required": [
                    "images"
                ],
                "properties": {
                    "id": {},
                    "images": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateNewsImagesType": {
                "required": [
                    "image"
                ],
                "properties": {
                    "id": {},
                    "image": {}
                },
                "type": "object"
            },
            "UpdateNewsStatusType": {
                "required": [
                    "archived"
                ],
                "properties": {
                    "id": {},
                    "archived": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Order": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "employee_id": {
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#\/components\/schemas\/EmployeeListItem"
                    },
                    "note": {
                        "type": "string"
                    },
                    "note_creator": {
                        "type": "string",
                        "nullable": true
                    },
                    "date": {
                        "type": "string"
                    },
                    "lines": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/OrderLine"
                        }
                    }
                },
                "type": "object"
            },
            "CreateOrderType": {
                "required": [
                    "type",
                    "items"
                ],
                "properties": {
                    "id": {},
                    "employee_id": {},
                    "type": {
                        "type": "string",
                        "enum": [
                            "clothing",
                            "pbm",
                            "first_aid"
                        ]
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/OrderLineType"
                        }
                    },
                    "note_creator": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateOrderType": {
                "required": [
                    "status",
                    "note",
                    "notify_employee",
                    "items"
                ],
                "properties": {
                    "id": {},
                    "status": {
                        "type": "string",
                        "enum": [
                            "open",
                            "ready",
                            "rejected"
                        ]
                    },
                    "note": {
                        "type": "string"
                    },
                    "notify_employee": {
                        "type": "boolean"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/UpdateOrderLineType"
                        }
                    }
                },
                "type": "object"
            },
            "Project": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "project_lead_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "project_lead": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#\/components\/schemas\/EmployeeListItem"
                            }
                        ]
                    },
                    "address": {
                        "$ref": "#\/components\/schemas\/OptionalAddress"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string",
                        "nullable": true
                    },
                    "archived": {
                        "type": "boolean"
                    },
                    "creation_date": {
                        "type": "string"
                    },
                    "branch": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateProjectType": {
                "required": [
                    "name",
                    "branch",
                    "notes"
                ],
                "properties": {
                    "id": {},
                    "name": {
                        "type": "string"
                    },
                    "project_lead_id": {
                        "type": "string"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "number": {
                        "type": "integer"
                    },
                    "addition": {
                        "type": "string"
                    },
                    "postal_code": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProjectFile": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "AddProjectFileType": {
                "required": [
                    "file"
                ],
                "properties": {
                    "id": {},
                    "project_id": {},
                    "name": {
                        "type": "string"
                    },
                    "file": {}
                },
                "type": "object"
            },
            "UpdateProjectType": {
                "required": [
                    "name",
                    "branch",
                    "notes",
                    "archived"
                ],
                "properties": {
                    "id": {},
                    "name": {
                        "type": "string"
                    },
                    "project_lead_id": {
                        "type": "string"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "street": {
                        "type": "string"
                    },
                    "number": {
                        "type": "integer"
                    },
                    "addition": {
                        "type": "string"
                    },
                    "postal_code": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "archived": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ImportResult": {
                "properties": {
                    "imported": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/ImportResultItem"
                        }
                    },
                    "not_imported": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/ImportResultItem"
                        }
                    }
                },
                "type": "object"
            },
            "CreateOrderParameters": {
                "required": [
                    "product_id",
                    "start_moment_id",
                    "invoice_entity_id",
                    "po_number"
                ],
                "properties": {
                    "product_id": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#\/components\/schemas\/UuidInterface"
                            }
                        ]
                    },
                    "start_moment_id": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#\/components\/schemas\/UuidInterface"
                            }
                        ]
                    },
                    "invoice_entity_id": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#\/components\/schemas\/UuidInterface"
                            }
                        ]
                    },
                    "po_number": {
                        "type": "string",
                        "nullable": true
                    },
                    "employee_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "TrainingRequest": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "requested_by": {
                        "type": "string"
                    },
                    "product_id": {
                        "type": "string"
                    },
                    "product_name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "remarks": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "processed_by": {
                        "type": "string",
                        "nullable": true
                    },
                    "processor_remarks": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateTrainingRequestParameters": {
                "required": [
                    "product_id",
                    "product_name",
                    "remarks"
                ],
                "properties": {
                    "product_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "product_name": {
                        "type": "string",
                        "nullable": true
                    },
                    "remarks": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ProcessTrainingRequestParameters": {
                "required": [
                    "new_status"
                ],
                "properties": {
                    "new_status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "granted",
                            "denied"
                        ],
                        "nullable": true
                    },
                    "remarks": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Worklog": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#\/components\/schemas\/Employee"
                    },
                    "date": {
                        "type": "string"
                    },
                    "time": {
                        "type": "integer"
                    },
                    "travel_time": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "sub_type": {
                        "type": "string"
                    },
                    "secondary_sub_type": {
                        "type": "string",
                        "nullable": true
                    },
                    "project": {
                        "nullable": true,
                        "allOf": [
                            {
                                "$ref": "#\/components\/schemas\/Project"
                            }
                        ]
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "manual_input": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateWorklogType": {
                "required": [
                    "date",
                    "time",
                    "travel_time",
                    "type",
                    "sub_type"
                ],
                "properties": {
                    "id": {},
                    "employee_id": {},
                    "date": {
                        "type": "string",
                        "format": "date"
                    },
                    "time": {
                        "type": "integer"
                    },
                    "travel_time": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "sub_type": {
                        "type": "string"
                    },
                    "secondary_sub_type": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "manual_input": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BatchCreateWorklogLockParameters": {
                "properties": {
                    "invalid": {
                        "type": "array",
                        "items": {
                            "$ref": "#\/components\/schemas\/CreateWorklogLockParameters"
                        },
                        "minItems": 1
                    }
                },
                "type": "object"
            },
            "WorklogLockCheckListItem": {
                "properties": {
                    "week": {
                        "type": "integer"
                    },
                    "year": {
                        "type": "integer"
                    },
                    "locked": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "WorklogLock": {
                "properties": {
                    "employee_id": {
                        "type": "string"
                    },
                    "week_number": {
                        "type": "integer"
                    },
                    "year": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "CreateWorklogLockType": {
                "required": [
                    "employee_id",
                    "week_number",
                    "year"
                ],
                "properties": {
                    "employee_id": {
                        "type": "string"
                    },
                    "week_number": {
                        "type": "integer"
                    },
                    "year": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "RemoveWorklogLockType": {
                "required": [
                    "employee_id",
                    "week_number",
                    "year"
                ],
                "properties": {
                    "employee_id": {
                        "type": "string"
                    },
                    "week_number": {
                        "type": "integer"
                    },
                    "year": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "UpdateWorkLogType": {
                "required": [
                    "date",
                    "time",
                    "travel_time",
                    "type",
                    "sub_type"
                ],
                "properties": {
                    "id": {},
                    "employee_id": {},
                    "date": {
                        "type": "string",
                        "format": "date"
                    },
                    "time": {
                        "type": "integer"
                    },
                    "travel_time": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "sub_type": {
                        "type": "string"
                    },
                    "secondary_sub_type": {
                        "type": "string"
                    },
                    "project_id": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "manual_input": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateSettingType": {
                "required": [
                    "key",
                    "value"
                ],
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EmergencyContactType": {
                "required": [
                    "name",
                    "relation",
                    "phone_number"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "relation": {
                        "type": "string"
                    },
                    "phone_number": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OptionalAddress": {
                "properties": {
                    "street": {
                        "type": "string",
                        "nullable": true
                    },
                    "number": {
                        "type": "integer",
                        "nullable": true
                    },
                    "addition": {
                        "type": "string",
                        "nullable": true
                    },
                    "postal_code": {
                        "type": "string",
                        "nullable": true
                    },
                    "city": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "EmergencyContact": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "relation": {
                        "type": "string"
                    },
                    "phone_number": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoketAccount": {
                "properties": {
                    "employer_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "employee_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "employment_id": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "EmployeeFile": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "acknowledged": {
                        "type": "boolean"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "mime_type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FormInstanceFile": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OrderLine": {
                "properties": {
                    "product_name": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "integer"
                    },
                    "amount_ready": {
                        "type": "integer"
                    },
                    "options": {
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "OrderLineType": {
                "required": [
                    "product_name",
                    "amount",
                    "options"
                ],
                "properties": {
                    "product_name": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "integer"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "UpdateOrderLineType": {
                "required": [
                    "product_name",
                    "amount",
                    "amount_ready",
                    "options"
                ],
                "properties": {
                    "product_name": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "integer"
                    },
                    "amount_ready": {
                        "type": "integer"
                    },
                    "options": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "ImportResultItem": {
                "properties": {
                    "id": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "reason": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "UuidInterface": {
                "properties": {
                    "bytes": {
                        "title": "Returns the binary string representation of the UUID",
                        "type": "string"
                    },
                    "fields": {
                        "$ref": "#\/components\/schemas\/FieldsInterface"
                    },
                    "hex": {
                        "$ref": "#\/components\/schemas\/Hexadecimal"
                    },
                    "integer": {
                        "$ref": "#\/components\/schemas\/Integer"
                    },
                    "numberConverter": {
                        "$ref": "#\/components\/schemas\/NumberConverterInterface"
                    },
                    "fieldsHex": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "clockSeqHiAndReservedHex": {
                        "type": "string"
                    },
                    "clockSeqLowHex": {
                        "type": "string"
                    },
                    "clockSequenceHex": {
                        "type": "string"
                    },
                    "dateTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "leastSignificantBitsHex": {
                        "type": "string"
                    },
                    "mostSignificantBitsHex": {
                        "type": "string"
                    },
                    "nodeHex": {
                        "type": "string"
                    },
                    "timeHiAndVersionHex": {
                        "type": "string"
                    },
                    "timeLowHex": {
                        "type": "string"
                    },
                    "timeMidHex": {
                        "type": "string"
                    },
                    "timestampHex": {
                        "type": "string"
                    },
                    "urn": {
                        "type": "string"
                    },
                    "variant": {
                        "type": "integer",
                        "nullable": true
                    },
                    "version": {
                        "type": "integer",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CreateWorklogLockParameters": {
                "required": [
                    "employee_id",
                    "week_number",
                    "year"
                ],
                "properties": {
                    "employee_id": {
                        "type": "string",
                        "nullable": true
                    },
                    "week_number": {
                        "type": "integer",
                        "maximum": 53,
                        "minimum": 0,
                        "nullable": true
                    },
                    "year": {
                        "type": "integer",
                        "minimum": 0,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "FieldsInterface": {
                "properties": {
                    "bytes": {
                        "title": "Returns the bytes that comprise the fields",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Hexadecimal": {
                "type": "object"
            },
            "Integer": {
                "properties": {
                    "negative": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "NumberConverterInterface": {
                "type": "object"
            }
        },
        "responses": {
            "200": {
                "description": "OK",
                "content": {
                    "application\/json": {
                        "example": "{}"
                    }
                }
            },
            "BatchResponse": {
                "description": "Contains an entry per entry from the request",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/BatchResponse"
                        }
                    }
                }
            },
            "Pdf": {
                "description": "Pdf file",
                "content": {
                    "application\/pdf": {}
                }
            },
            "Csv": {
                "description": "Csv file",
                "content": {
                    "text\/plain": {}
                }
            },
            "Download": {
                "description": "File content"
            },
            "201": {
                "description": "Created",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/EntityCreatedResponse"
                        }
                    }
                }
            },
            "ImageAdded": {
                "description": "Created",
                "content": {
                    "application\/json": {
                        "schema": {
                            "properties": {
                                "path": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "NewsImageAdded": {
                "description": "Created",
                "content": {
                    "application\/json": {
                        "schema": {
                            "properties": {
                                "public_path": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "202": {
                "description": "Accepted",
                "content": {
                    "application\/json": {
                        "example": "{}"
                    }
                }
            },
            "204": {
                "description": "No Content",
                "content": {
                    "application\/json": {
                        "example": "{}"
                    }
                }
            },
            "400": {
                "description": "Bad Request",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/BadRequestResponse"
                        }
                    }
                }
            },
            "401": {
                "description": "Unauthorized",
                "content": {
                    "text\/html": {
                        "examples": {
                            "Default": {
                                "summary": "Unauthorized",
                                "value": "The resource server rejected the request."
                            }
                        }
                    }
                }
            },
            "403": {
                "description": "Forbidden",
                "content": {
                    "application\/json": {
                        "schema": {
                            "$ref": "#\/components\/schemas\/ErrorMessage"
                        },
                        "examples": {
                            "Default": {
                                "summary": "Access denied",
                                "value": {
                                    "error": {
                                        "code": 25,
                                        "message": "Access denied",
                                        "data": null
                                    }
                                }
                            }
                        }
                    },
                    "text\/html": {
                        "schema": {
                            "description": "Unauthorized - No access to this resource (usually invalid token scope)"
                        }
                    }
                }
            }
        },
        "parameters": {
            "pagination_offset": {
                "name": "offset",
                "in": "query",
                "description": "How many items to skip",
                "required": false,
                "schema": {
                    "type": "int"
                }
            },
            "pagination_limit": {
                "name": "limit",
                "in": "query",
                "description": "The numbers of items to return.",
                "required": false,
                "schema": {
                    "type": "int"
                }
            },
            "sort_order": {
                "name": "sort_order",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": [
                        "ASC",
                        "DESC"
                    ]
                }
            }
        },
        "securitySchemes": {
            "OAuth2": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "tokenUrl": "\/api\/token",
                        "scopes": {}
                    }
                }
            }
        }
    }
}